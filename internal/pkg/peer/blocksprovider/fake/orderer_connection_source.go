// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"sync"

	"github.com/hyperledger/fabric/internal/pkg/peer/blocksprovider"
	"github.com/hyperledger/fabric/internal/pkg/peer/orderers"
)

type OrdererConnectionSource struct {
	GetAllEndpointsStub        func() []*orderers.Endpoint
	getAllEndpointsMutex       sync.RWMutex
	getAllEndpointsArgsForCall []struct {
	}
	getAllEndpointsReturns struct {
		result1 []*orderers.Endpoint
	}
	getAllEndpointsReturnsOnCall map[int]struct {
		result1 []*orderers.Endpoint
	}
	InitUpdateEndpointsChannelStub        func() chan []*orderers.Endpoint
	initUpdateEndpointsChannelMutex       sync.RWMutex
	initUpdateEndpointsChannelArgsForCall []struct {
	}
	initUpdateEndpointsChannelReturns struct {
		result1 chan []*orderers.Endpoint
	}
	initUpdateEndpointsChannelReturnsOnCall map[int]struct {
		result1 chan []*orderers.Endpoint
	}
	RandomEndpointStub        func() (*orderers.Endpoint, error)
	randomEndpointMutex       sync.RWMutex
	randomEndpointArgsForCall []struct {
	}
	randomEndpointReturns struct {
		result1 *orderers.Endpoint
		result2 error
	}
	randomEndpointReturnsOnCall map[int]struct {
		result1 *orderers.Endpoint
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}


func (fake *OrdererConnectionSource) GetAllEndpoints() []*orderers.Endpoint {
	fake.getAllEndpointsMutex.Lock()
	ret, specificReturn := fake.getAllEndpointsReturnsOnCall[len(fake.getAllEndpointsArgsForCall)]
	fake.getAllEndpointsArgsForCall = append(fake.getAllEndpointsArgsForCall, struct {
	}{})
	stub := fake.GetAllEndpointsStub
	fakeReturns := fake.getAllEndpointsReturns
	fake.recordInvocation("GetAllEndpoints", []interface{}{})
	fake.getAllEndpointsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *OrdererConnectionSource) GetAllEndpointsCallCount() int {
	fake.getAllEndpointsMutex.RLock()
	defer fake.getAllEndpointsMutex.RUnlock()
	return len(fake.getAllEndpointsArgsForCall)
}

func (fake *OrdererConnectionSource) GetAllEndpointsCalls(stub func() []*orderers.Endpoint) {
	fake.getAllEndpointsMutex.Lock()
	defer fake.getAllEndpointsMutex.Unlock()
	fake.GetAllEndpointsStub = stub
}

func (fake *OrdererConnectionSource) GetAllEndpointsReturns(result1 []*orderers.Endpoint) {
	fake.getAllEndpointsMutex.Lock()
	defer fake.getAllEndpointsMutex.Unlock()
	fake.GetAllEndpointsStub = nil
	fake.getAllEndpointsReturns = struct {
		result1 []*orderers.Endpoint
	}{result1}
}

func (fake *OrdererConnectionSource) GetAllEndpointsReturnsOnCall(i int, result1 []*orderers.Endpoint) {
	fake.getAllEndpointsMutex.Lock()
	defer fake.getAllEndpointsMutex.Unlock()
	fake.GetAllEndpointsStub = nil
	if fake.getAllEndpointsReturnsOnCall == nil {
		fake.getAllEndpointsReturnsOnCall = make(map[int]struct {
			result1 []*orderers.Endpoint
		})
	}
	fake.getAllEndpointsReturnsOnCall[i] = struct {
		result1 []*orderers.Endpoint
	}{result1}
}

func (fake *OrdererConnectionSource) InitUpdateEndpointsChannel() chan []*orderers.Endpoint {
	fake.initUpdateEndpointsChannelMutex.Lock()
	ret, specificReturn := fake.initUpdateEndpointsChannelReturnsOnCall[len(fake.initUpdateEndpointsChannelArgsForCall)]
	fake.initUpdateEndpointsChannelArgsForCall = append(fake.initUpdateEndpointsChannelArgsForCall, struct {
	}{})
	stub := fake.InitUpdateEndpointsChannelStub
	fakeReturns := fake.initUpdateEndpointsChannelReturns
	fake.recordInvocation("InitUpdateEndpointsChannel", []interface{}{})
	fake.initUpdateEndpointsChannelMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *OrdererConnectionSource) InitUpdateEndpointsChannelCallCount() int {
	fake.initUpdateEndpointsChannelMutex.RLock()
	defer fake.initUpdateEndpointsChannelMutex.RUnlock()
	return len(fake.initUpdateEndpointsChannelArgsForCall)
}

func (fake *OrdererConnectionSource) InitUpdateEndpointsChannelCalls(stub func() chan []*orderers.Endpoint) {
	fake.initUpdateEndpointsChannelMutex.Lock()
	defer fake.initUpdateEndpointsChannelMutex.Unlock()
	fake.InitUpdateEndpointsChannelStub = stub
}

func (fake *OrdererConnectionSource) InitUpdateEndpointsChannelReturns(result1 chan []*orderers.Endpoint) {
	fake.initUpdateEndpointsChannelMutex.Lock()
	defer fake.initUpdateEndpointsChannelMutex.Unlock()
	fake.InitUpdateEndpointsChannelStub = nil
	fake.initUpdateEndpointsChannelReturns = struct {
		result1 chan []*orderers.Endpoint
	}{result1}
}

func (fake *OrdererConnectionSource) InitUpdateEndpointsChannelReturnsOnCall(i int, result1 chan []*orderers.Endpoint) {
	fake.initUpdateEndpointsChannelMutex.Lock()
	defer fake.initUpdateEndpointsChannelMutex.Unlock()
	fake.InitUpdateEndpointsChannelStub = nil
	if fake.initUpdateEndpointsChannelReturnsOnCall == nil {
		fake.initUpdateEndpointsChannelReturnsOnCall = make(map[int]struct {
			result1 chan []*orderers.Endpoint
		})
	}
	fake.initUpdateEndpointsChannelReturnsOnCall[i] = struct {
		result1 chan []*orderers.Endpoint
	}{result1}
}

func (fake *OrdererConnectionSource) RandomEndpoint() (*orderers.Endpoint, error) {
	fake.randomEndpointMutex.Lock()
	ret, specificReturn := fake.randomEndpointReturnsOnCall[len(fake.randomEndpointArgsForCall)]
	fake.randomEndpointArgsForCall = append(fake.randomEndpointArgsForCall, struct {
	}{})
	fake.recordInvocation("RandomEndpoint", []interface{}{})
	fake.randomEndpointMutex.Unlock()
	if fake.RandomEndpointStub != nil {
		return fake.RandomEndpointStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.randomEndpointReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *OrdererConnectionSource) RandomEndpointCallCount() int {
	fake.randomEndpointMutex.RLock()
	defer fake.randomEndpointMutex.RUnlock()
	return len(fake.randomEndpointArgsForCall)
}

func (fake *OrdererConnectionSource) RandomEndpointCalls(stub func() (*orderers.Endpoint, error)) {
	fake.randomEndpointMutex.Lock()
	defer fake.randomEndpointMutex.Unlock()
	fake.RandomEndpointStub = stub
}

func (fake *OrdererConnectionSource) RandomEndpointReturns(result1 *orderers.Endpoint, result2 error) {
	fake.randomEndpointMutex.Lock()
	defer fake.randomEndpointMutex.Unlock()
	fake.RandomEndpointStub = nil
	fake.randomEndpointReturns = struct {
		result1 *orderers.Endpoint
		result2 error
	}{result1, result2}
}

func (fake *OrdererConnectionSource) RandomEndpointReturnsOnCall(i int, result1 *orderers.Endpoint, result2 error) {
	fake.randomEndpointMutex.Lock()
	defer fake.randomEndpointMutex.Unlock()
	fake.RandomEndpointStub = nil
	if fake.randomEndpointReturnsOnCall == nil {
		fake.randomEndpointReturnsOnCall = make(map[int]struct {
			result1 *orderers.Endpoint
			result2 error
		})
	}
	fake.randomEndpointReturnsOnCall[i] = struct {
		result1 *orderers.Endpoint
		result2 error
	}{result1, result2}
}

func (fake *OrdererConnectionSource) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getAllEndpointsMutex.RLock()
	defer fake.getAllEndpointsMutex.RUnlock()
	fake.initUpdateEndpointsChannelMutex.RLock()
	defer fake.initUpdateEndpointsChannelMutex.RUnlock()
	fake.randomEndpointMutex.RLock()
	defer fake.randomEndpointMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *OrdererConnectionSource) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ blocksprovider.OrdererConnectionSource = new(OrdererConnectionSource)
